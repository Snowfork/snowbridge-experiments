/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BytesLike } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MerkleTree } from "../MerkleTree";

export class MerkleTree__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(_root: BytesLike, overrides?: Overrides): Promise<MerkleTree> {
    return super.deploy(_root, overrides || {}) as Promise<MerkleTree>;
  }
  getDeployTransaction(
    _root: BytesLike,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_root, overrides || {});
  }
  attach(address: string): MerkleTree {
    return super.attach(address) as MerkleTree;
  }
  connect(signer: Signer): MerkleTree__factory {
    return super.connect(signer) as MerkleTree__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleTree {
    return new Contract(address, _abi, signerOrProvider) as MerkleTree;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "root",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32",
      },
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161027f38038061027f8339818101604052602081101561003357600080fd5b810190808051906020019092919050505080600081905550506102248061005b6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636df4d2411461003b578063ebf0c71714610113575b600080fd5b6100fb6004803603604081101561005157600080fd5b81019080803590602001909291908035906020019064010000000081111561007857600080fd5b82018360208201111561008a57600080fd5b803590602001918460208302840111640100000000831117156100ac57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610131565b60405180821515815260200191505060405180910390f35b61011b6101e8565b6040518082815260200191505060405180910390f35b60008083905060005b83518110156101d957600084828151811061015157fe5b602002602001015190508083101561019957828160405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092506101cb565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b50808060010191505061013a565b50600054811491505092915050565b6000548156fea2646970667358221220516a864087a343f52c4d30d14cf6e9968cd8511b2338f0687f549c1a1da63a5564736f6c63430007050033";
