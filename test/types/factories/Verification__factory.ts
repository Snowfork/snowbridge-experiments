/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { Verification } from "../Verification";

export class Verification__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<Verification> {
    return super.deploy(overrides || {}) as Promise<Verification>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Verification {
    return super.attach(address) as Verification;
  }
  connect(signer: Signer): Verification__factory {
    return super.connect(signer) as Verification__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Verification {
    return new Contract(address, _abi, signerOrProvider) as Verification;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_data",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32",
        name: "_commitment",
        type: "bytes32",
      },
    ],
    name: "verifyMerkleAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32",
      },
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
    ],
    name: "verifyMerkleLeaf",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_data",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32",
        name: "_commitment",
        type: "bytes32",
      },
    ],
    name: "verifyMessageArray",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506104a0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063ba169d0114610046578063d2959ece1461011e578063da410518146101c1575b600080fd5b6101066004803603604081101561005c57600080fd5b810190808035906020019064010000000081111561007957600080fd5b82018360208201111561008b57600080fd5b803590602001918460208302840111640100000000831117156100ad57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919050505061025a565b60405180821515815260200191505060405180910390f35b6101a96004803603606081101561013457600080fd5b8101908080359060200190929190803590602001909291908035906020019064010000000081111561016557600080fd5b82018360208201111561017757600080fd5b8035906020019184602083028401116401000000008311171561019957600080fd5b9091929391929390505050610329565b60405180821515815260200191505060405180910390f35b610242600480360360408110156101d757600080fd5b81019080803590602001906401000000008111156101f457600080fd5b82018360208201111561020657600080fd5b8035906020019184602083028401116401000000008311171561022857600080fd5b9091929391929390803590602001909291905050506103e1565b60405180821515815260200191505060405180910390f35b6000808351905060005b60018211156103085760005b828110156102f95785818151811061028457fe5b602002602001015186600183018151811061029b57fe5b60200260200101516040516020018083815260200182815260200192505050604051602081830303815290604052805190602001208683815181106102dc57fe5b602002602001018181525050600182019150600281019050610270565b50808203915060009050610264565b50828460008151811061031757fe5b60200260200101511491505092915050565b60008084905060005b848490508110156103d257600085858381811061034b57fe5b9050602002013590508083101561039257828160405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092506103c4565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b508080600101915050610332565b50858114915050949350505050565b600080848460008181106103f157fe5b9050602002013590506000600190505b8585905081101561045c578186868381811061041957fe5b9050602002013560405160200180838152602001828152602001925050506040516020818303038152906040528051906020012091508080600101915050610401565b50828114915050939250505056fea2646970667358221220e3eed3baac59ed66c3f0c8adcd4befb382969f2ad8b7c14a26f4e2dcc368063464736f6c63430007050033";
