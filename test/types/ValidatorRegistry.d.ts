/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ValidatorRegistryInterface extends ethers.utils.Interface {
  functions: {
    "checkValidatorInSet(address,bytes32[])": FunctionFragment;
    "owner()": FunctionFragment;
    "registerValidator(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "root()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unregisterValidator(address)": FunctionFragment;
    "validatorSetBitfield()": FunctionFragment;
    "verify(bytes32,bytes32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkValidatorInSet",
    values: [string, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerValidator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "root", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterValidator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorSetBitfield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [BytesLike, BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkValidatorInSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "root", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorSetBitfield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ValidatorRegistered(address)": EventFragment;
    "ValidatorUnregistered(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorUnregistered"): EventFragment;
}

export class ValidatorRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ValidatorRegistryInterface;

  functions: {
    checkValidatorInSet(
      validatorAddress: string,
      validatorAddressMerkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "checkValidatorInSet(address,bytes32[])"(
      validatorAddress: string,
      validatorAddressMerkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    registerValidator(
      validator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerValidator(address)"(
      validator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    root(overrides?: CallOverrides): Promise<[string]>;

    "root()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unregisterValidator(
      validator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unregisterValidator(address)"(
      validator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validatorSetBitfield(overrides?: CallOverrides): Promise<[BigNumber]>;

    "validatorSetBitfield()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    verify(
      leaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "verify(bytes32,bytes32[])"(
      leaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  checkValidatorInSet(
    validatorAddress: string,
    validatorAddressMerkleProof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "checkValidatorInSet(address,bytes32[])"(
    validatorAddress: string,
    validatorAddressMerkleProof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  registerValidator(
    validator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerValidator(address)"(
    validator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  root(overrides?: CallOverrides): Promise<string>;

  "root()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unregisterValidator(
    validator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unregisterValidator(address)"(
    validator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validatorSetBitfield(overrides?: CallOverrides): Promise<BigNumber>;

  "validatorSetBitfield()"(overrides?: CallOverrides): Promise<BigNumber>;

  verify(
    leaf: BytesLike,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verify(bytes32,bytes32[])"(
    leaf: BytesLike,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    checkValidatorInSet(
      validatorAddress: string,
      validatorAddressMerkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "checkValidatorInSet(address,bytes32[])"(
      validatorAddress: string,
      validatorAddressMerkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    registerValidator(
      validator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "registerValidator(address)"(
      validator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    root(overrides?: CallOverrides): Promise<string>;

    "root()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterValidator(
      validator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "unregisterValidator(address)"(
      validator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    validatorSetBitfield(overrides?: CallOverrides): Promise<BigNumber>;

    "validatorSetBitfield()"(overrides?: CallOverrides): Promise<BigNumber>;

    verify(
      leaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verify(bytes32,bytes32[])"(
      leaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    ValidatorRegistered(validator: null): EventFilter;

    ValidatorUnregistered(validator: null): EventFilter;
  };

  estimateGas: {
    checkValidatorInSet(
      validatorAddress: string,
      validatorAddressMerkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkValidatorInSet(address,bytes32[])"(
      validatorAddress: string,
      validatorAddressMerkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerValidator(
      validator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerValidator(address)"(
      validator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<BigNumber>;

    "root()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unregisterValidator(
      validator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unregisterValidator(address)"(
      validator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validatorSetBitfield(overrides?: CallOverrides): Promise<BigNumber>;

    "validatorSetBitfield()"(overrides?: CallOverrides): Promise<BigNumber>;

    verify(
      leaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verify(bytes32,bytes32[])"(
      leaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkValidatorInSet(
      validatorAddress: string,
      validatorAddressMerkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkValidatorInSet(address,bytes32[])"(
      validatorAddress: string,
      validatorAddressMerkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerValidator(
      validator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerValidator(address)"(
      validator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    root(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "root()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unregisterValidator(
      validator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unregisterValidator(address)"(
      validator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validatorSetBitfield(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validatorSetBitfield()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      leaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verify(bytes32,bytes32[])"(
      leaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
