/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LightClientBridgeInterface extends ethers.utils.Interface {
  functions: {
    "BLOCK_WAIT_PERIOD()": FunctionFragment;
    "MAXIMUM_NUM_SIGNERS()": FunctionFragment;
    "NUMBER_OF_SIGNERS()": FunctionFragment;
    "completeSignatureCommitment(uint256,bytes32,bytes[5],uint8[5],address[5],bytes32[][5])": FunctionFragment;
    "currentId()": FunctionFragment;
    "newSignatureCommitment(bytes32,uint256,bytes,address,bytes32[])": FunctionFragment;
    "testSig(bytes32,bytes)": FunctionFragment;
    "testSigRaw(bytes32,bytes32,bytes32)": FunctionFragment;
    "validationData(uint256)": FunctionFragment;
    "validatorRegistry()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BLOCK_WAIT_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAXIMUM_NUM_SIGNERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NUMBER_OF_SIGNERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeSignatureCommitment",
    values: [
      BigNumberish,
      BytesLike,
      [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [string, string, string, string, string],
      [BytesLike[], BytesLike[], BytesLike[], BytesLike[], BytesLike[]]
    ]
  ): string;
  encodeFunctionData(functionFragment: "currentId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newSignatureCommitment",
    values: [BytesLike, BigNumberish, BytesLike, string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "testSig",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testSigRaw",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validationData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorRegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BLOCK_WAIT_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAXIMUM_NUM_SIGNERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NUMBER_OF_SIGNERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSignatureCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currentId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newSignatureCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testSig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testSigRaw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorRegistry",
    data: BytesLike
  ): Result;

  events: {
    "FinalVerificationSuccessful(address,bytes32,uint256)": EventFragment;
    "InitialVerificationSuccessful(address,uint256,uint256)": EventFragment;
    "LogA(address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "FinalVerificationSuccessful"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InitialVerificationSuccessful"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogA"): EventFragment;
}

export class LightClientBridge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LightClientBridgeInterface;

  functions: {
    BLOCK_WAIT_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    "BLOCK_WAIT_PERIOD()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAXIMUM_NUM_SIGNERS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAXIMUM_NUM_SIGNERS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    NUMBER_OF_SIGNERS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "NUMBER_OF_SIGNERS()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    completeSignatureCommitment(
      id: BigNumberish,
      payload: BytesLike,
      randomSignatureCommitments: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      randomSignatureBitfieldPositions: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      randomValidatorAddresses: [string, string, string, string, string],
      randomPublicKeyMerkleProofs: [
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[]
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "completeSignatureCommitment(uint256,bytes32,bytes[5],uint8[5],address[5],bytes32[][5])"(
      id: BigNumberish,
      payload: BytesLike,
      randomSignatureCommitments: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      randomSignatureBitfieldPositions: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      randomValidatorAddresses: [string, string, string, string, string],
      randomPublicKeyMerkleProofs: [
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[]
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    currentId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    newSignatureCommitment(
      payload: BytesLike,
      validatorClaimsBitfield: BigNumberish,
      validatorSignatureCommitment: BytesLike,
      validatorPublicKey: string,
      validatorPublicKeyMerkleProof: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "newSignatureCommitment(bytes32,uint256,bytes,address,bytes32[])"(
      payload: BytesLike,
      validatorClaimsBitfield: BigNumberish,
      validatorSignatureCommitment: BytesLike,
      validatorPublicKey: string,
      validatorPublicKeyMerkleProof: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    testSig(
      payload: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "testSig(bytes32,bytes)"(
      payload: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    testSigRaw(
      hash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "testSigRaw(bytes32,bytes32,bytes32)"(
      hash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    validationData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        senderAddress: string;
        payload: string;
        validatorClaimsBitfield: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    "validationData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        senderAddress: string;
        payload: string;
        validatorClaimsBitfield: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    validatorRegistry(overrides?: CallOverrides): Promise<[string]>;

    "validatorRegistry()"(overrides?: CallOverrides): Promise<[string]>;
  };

  BLOCK_WAIT_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  "BLOCK_WAIT_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

  MAXIMUM_NUM_SIGNERS(overrides?: CallOverrides): Promise<BigNumber>;

  "MAXIMUM_NUM_SIGNERS()"(overrides?: CallOverrides): Promise<BigNumber>;

  NUMBER_OF_SIGNERS(overrides?: CallOverrides): Promise<BigNumber>;

  "NUMBER_OF_SIGNERS()"(overrides?: CallOverrides): Promise<BigNumber>;

  completeSignatureCommitment(
    id: BigNumberish,
    payload: BytesLike,
    randomSignatureCommitments: [
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ],
    randomSignatureBitfieldPositions: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    randomValidatorAddresses: [string, string, string, string, string],
    randomPublicKeyMerkleProofs: [
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[]
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "completeSignatureCommitment(uint256,bytes32,bytes[5],uint8[5],address[5],bytes32[][5])"(
    id: BigNumberish,
    payload: BytesLike,
    randomSignatureCommitments: [
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ],
    randomSignatureBitfieldPositions: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    randomValidatorAddresses: [string, string, string, string, string],
    randomPublicKeyMerkleProofs: [
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[]
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  currentId(overrides?: CallOverrides): Promise<BigNumber>;

  "currentId()"(overrides?: CallOverrides): Promise<BigNumber>;

  newSignatureCommitment(
    payload: BytesLike,
    validatorClaimsBitfield: BigNumberish,
    validatorSignatureCommitment: BytesLike,
    validatorPublicKey: string,
    validatorPublicKeyMerkleProof: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "newSignatureCommitment(bytes32,uint256,bytes,address,bytes32[])"(
    payload: BytesLike,
    validatorClaimsBitfield: BigNumberish,
    validatorSignatureCommitment: BytesLike,
    validatorPublicKey: string,
    validatorPublicKeyMerkleProof: BytesLike[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  testSig(
    payload: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  "testSig(bytes32,bytes)"(
    payload: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  testSigRaw(
    hash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "testSigRaw(bytes32,bytes32,bytes32)"(
    hash: BytesLike,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  validationData(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      senderAddress: string;
      payload: string;
      validatorClaimsBitfield: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  "validationData(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber] & {
      senderAddress: string;
      payload: string;
      validatorClaimsBitfield: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  validatorRegistry(overrides?: CallOverrides): Promise<string>;

  "validatorRegistry()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BLOCK_WAIT_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "BLOCK_WAIT_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_NUM_SIGNERS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAXIMUM_NUM_SIGNERS()"(overrides?: CallOverrides): Promise<BigNumber>;

    NUMBER_OF_SIGNERS(overrides?: CallOverrides): Promise<BigNumber>;

    "NUMBER_OF_SIGNERS()"(overrides?: CallOverrides): Promise<BigNumber>;

    completeSignatureCommitment(
      id: BigNumberish,
      payload: BytesLike,
      randomSignatureCommitments: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      randomSignatureBitfieldPositions: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      randomValidatorAddresses: [string, string, string, string, string],
      randomPublicKeyMerkleProofs: [
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[]
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "completeSignatureCommitment(uint256,bytes32,bytes[5],uint8[5],address[5],bytes32[][5])"(
      id: BigNumberish,
      payload: BytesLike,
      randomSignatureCommitments: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      randomSignatureBitfieldPositions: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      randomValidatorAddresses: [string, string, string, string, string],
      randomPublicKeyMerkleProofs: [
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[]
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    currentId(overrides?: CallOverrides): Promise<BigNumber>;

    "currentId()"(overrides?: CallOverrides): Promise<BigNumber>;

    newSignatureCommitment(
      payload: BytesLike,
      validatorClaimsBitfield: BigNumberish,
      validatorSignatureCommitment: BytesLike,
      validatorPublicKey: string,
      validatorPublicKeyMerkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "newSignatureCommitment(bytes32,uint256,bytes,address,bytes32[])"(
      payload: BytesLike,
      validatorClaimsBitfield: BigNumberish,
      validatorSignatureCommitment: BytesLike,
      validatorPublicKey: string,
      validatorPublicKeyMerkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    testSig(
      payload: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "testSig(bytes32,bytes)"(
      payload: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    testSigRaw(
      hash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "testSigRaw(bytes32,bytes32,bytes32)"(
      hash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    validationData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        senderAddress: string;
        payload: string;
        validatorClaimsBitfield: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    "validationData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        senderAddress: string;
        payload: string;
        validatorClaimsBitfield: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    validatorRegistry(overrides?: CallOverrides): Promise<string>;

    "validatorRegistry()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    FinalVerificationSuccessful(
      prover: null,
      payload: null,
      id: null
    ): EventFilter;

    InitialVerificationSuccessful(
      prover: null,
      blockNumber: null,
      id: null
    ): EventFilter;

    LogA(a: null): EventFilter;
  };

  estimateGas: {
    BLOCK_WAIT_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "BLOCK_WAIT_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAXIMUM_NUM_SIGNERS(overrides?: CallOverrides): Promise<BigNumber>;

    "MAXIMUM_NUM_SIGNERS()"(overrides?: CallOverrides): Promise<BigNumber>;

    NUMBER_OF_SIGNERS(overrides?: CallOverrides): Promise<BigNumber>;

    "NUMBER_OF_SIGNERS()"(overrides?: CallOverrides): Promise<BigNumber>;

    completeSignatureCommitment(
      id: BigNumberish,
      payload: BytesLike,
      randomSignatureCommitments: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      randomSignatureBitfieldPositions: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      randomValidatorAddresses: [string, string, string, string, string],
      randomPublicKeyMerkleProofs: [
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[]
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "completeSignatureCommitment(uint256,bytes32,bytes[5],uint8[5],address[5],bytes32[][5])"(
      id: BigNumberish,
      payload: BytesLike,
      randomSignatureCommitments: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      randomSignatureBitfieldPositions: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      randomValidatorAddresses: [string, string, string, string, string],
      randomPublicKeyMerkleProofs: [
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[]
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    currentId(overrides?: CallOverrides): Promise<BigNumber>;

    "currentId()"(overrides?: CallOverrides): Promise<BigNumber>;

    newSignatureCommitment(
      payload: BytesLike,
      validatorClaimsBitfield: BigNumberish,
      validatorSignatureCommitment: BytesLike,
      validatorPublicKey: string,
      validatorPublicKeyMerkleProof: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "newSignatureCommitment(bytes32,uint256,bytes,address,bytes32[])"(
      payload: BytesLike,
      validatorClaimsBitfield: BigNumberish,
      validatorSignatureCommitment: BytesLike,
      validatorPublicKey: string,
      validatorPublicKeyMerkleProof: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    testSig(
      payload: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "testSig(bytes32,bytes)"(
      payload: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testSigRaw(
      hash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "testSigRaw(bytes32,bytes32,bytes32)"(
      hash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    validationData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validationData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "validatorRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BLOCK_WAIT_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BLOCK_WAIT_PERIOD()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAXIMUM_NUM_SIGNERS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAXIMUM_NUM_SIGNERS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NUMBER_OF_SIGNERS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "NUMBER_OF_SIGNERS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeSignatureCommitment(
      id: BigNumberish,
      payload: BytesLike,
      randomSignatureCommitments: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      randomSignatureBitfieldPositions: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      randomValidatorAddresses: [string, string, string, string, string],
      randomPublicKeyMerkleProofs: [
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[]
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "completeSignatureCommitment(uint256,bytes32,bytes[5],uint8[5],address[5],bytes32[][5])"(
      id: BigNumberish,
      payload: BytesLike,
      randomSignatureCommitments: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      randomSignatureBitfieldPositions: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      randomValidatorAddresses: [string, string, string, string, string],
      randomPublicKeyMerkleProofs: [
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[],
        BytesLike[]
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    currentId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newSignatureCommitment(
      payload: BytesLike,
      validatorClaimsBitfield: BigNumberish,
      validatorSignatureCommitment: BytesLike,
      validatorPublicKey: string,
      validatorPublicKeyMerkleProof: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "newSignatureCommitment(bytes32,uint256,bytes,address,bytes32[])"(
      payload: BytesLike,
      validatorClaimsBitfield: BigNumberish,
      validatorSignatureCommitment: BytesLike,
      validatorPublicKey: string,
      validatorPublicKeyMerkleProof: BytesLike[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    testSig(
      payload: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "testSig(bytes32,bytes)"(
      payload: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testSigRaw(
      hash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "testSigRaw(bytes32,bytes32,bytes32)"(
      hash: BytesLike,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    validationData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validationData(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "validatorRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
