/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MMRVerificationInterface extends ethers.utils.Interface {
  functions: {
    "executeMessages(bytes32,bytes32,bytes32[],bytes32[],bytes32[])": FunctionFragment;
    "updateMMR(bytes32,bytes32[],uint8[])": FunctionFragment;
    "updateMMRWithValSet(bytes32,bytes32[],uint8[],bytes32[],bytes32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "executeMessages",
    values: [BytesLike, BytesLike, BytesLike[], BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMMR",
    values: [BytesLike, BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMMRWithValSet",
    values: [BytesLike, BytesLike[], BigNumberish[], BytesLike[], BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateMMR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMMRWithValSet",
    data: BytesLike
  ): Result;

  events: {};
}

export class MMRVerification extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MMRVerificationInterface;

  functions: {
    executeMessages(
      blockHeader: BytesLike,
      paraHead: BytesLike,
      paraHeadSiblingsProof: BytesLike[],
      messages: BytesLike[],
      mmrSiblingsProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeMessages(bytes32,bytes32,bytes32[],bytes32[],bytes32[])"(
      blockHeader: BytesLike,
      paraHead: BytesLike,
      paraHeadSiblingsProof: BytesLike[],
      messages: BytesLike[],
      mmrSiblingsProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateMMR(
      newMmrRoot: BytesLike,
      signatures: BytesLike[],
      bitmap: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateMMR(bytes32,bytes32[],uint8[])"(
      newMmrRoot: BytesLike,
      signatures: BytesLike[],
      bitmap: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateMMRWithValSet(
      newMmrRoot: BytesLike,
      signatures: BytesLike[],
      bitmap: BigNumberish[],
      valPubKeys: BytesLike[],
      pubKeyProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateMMRWithValSet(bytes32,bytes32[],uint8[],bytes32[],bytes32[])"(
      newMmrRoot: BytesLike,
      signatures: BytesLike[],
      bitmap: BigNumberish[],
      valPubKeys: BytesLike[],
      pubKeyProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  executeMessages(
    blockHeader: BytesLike,
    paraHead: BytesLike,
    paraHeadSiblingsProof: BytesLike[],
    messages: BytesLike[],
    mmrSiblingsProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeMessages(bytes32,bytes32,bytes32[],bytes32[],bytes32[])"(
    blockHeader: BytesLike,
    paraHead: BytesLike,
    paraHeadSiblingsProof: BytesLike[],
    messages: BytesLike[],
    mmrSiblingsProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateMMR(
    newMmrRoot: BytesLike,
    signatures: BytesLike[],
    bitmap: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateMMR(bytes32,bytes32[],uint8[])"(
    newMmrRoot: BytesLike,
    signatures: BytesLike[],
    bitmap: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateMMRWithValSet(
    newMmrRoot: BytesLike,
    signatures: BytesLike[],
    bitmap: BigNumberish[],
    valPubKeys: BytesLike[],
    pubKeyProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateMMRWithValSet(bytes32,bytes32[],uint8[],bytes32[],bytes32[])"(
    newMmrRoot: BytesLike,
    signatures: BytesLike[],
    bitmap: BigNumberish[],
    valPubKeys: BytesLike[],
    pubKeyProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    executeMessages(
      blockHeader: BytesLike,
      paraHead: BytesLike,
      paraHeadSiblingsProof: BytesLike[],
      messages: BytesLike[],
      mmrSiblingsProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "executeMessages(bytes32,bytes32,bytes32[],bytes32[],bytes32[])"(
      blockHeader: BytesLike,
      paraHead: BytesLike,
      paraHeadSiblingsProof: BytesLike[],
      messages: BytesLike[],
      mmrSiblingsProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateMMR(
      newMmrRoot: BytesLike,
      signatures: BytesLike[],
      bitmap: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updateMMR(bytes32,bytes32[],uint8[])"(
      newMmrRoot: BytesLike,
      signatures: BytesLike[],
      bitmap: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateMMRWithValSet(
      newMmrRoot: BytesLike,
      signatures: BytesLike[],
      bitmap: BigNumberish[],
      valPubKeys: BytesLike[],
      pubKeyProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "updateMMRWithValSet(bytes32,bytes32[],uint8[],bytes32[],bytes32[])"(
      newMmrRoot: BytesLike,
      signatures: BytesLike[],
      bitmap: BigNumberish[],
      valPubKeys: BytesLike[],
      pubKeyProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    executeMessages(
      blockHeader: BytesLike,
      paraHead: BytesLike,
      paraHeadSiblingsProof: BytesLike[],
      messages: BytesLike[],
      mmrSiblingsProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeMessages(bytes32,bytes32,bytes32[],bytes32[],bytes32[])"(
      blockHeader: BytesLike,
      paraHead: BytesLike,
      paraHeadSiblingsProof: BytesLike[],
      messages: BytesLike[],
      mmrSiblingsProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateMMR(
      newMmrRoot: BytesLike,
      signatures: BytesLike[],
      bitmap: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateMMR(bytes32,bytes32[],uint8[])"(
      newMmrRoot: BytesLike,
      signatures: BytesLike[],
      bitmap: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateMMRWithValSet(
      newMmrRoot: BytesLike,
      signatures: BytesLike[],
      bitmap: BigNumberish[],
      valPubKeys: BytesLike[],
      pubKeyProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateMMRWithValSet(bytes32,bytes32[],uint8[],bytes32[],bytes32[])"(
      newMmrRoot: BytesLike,
      signatures: BytesLike[],
      bitmap: BigNumberish[],
      valPubKeys: BytesLike[],
      pubKeyProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    executeMessages(
      blockHeader: BytesLike,
      paraHead: BytesLike,
      paraHeadSiblingsProof: BytesLike[],
      messages: BytesLike[],
      mmrSiblingsProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeMessages(bytes32,bytes32,bytes32[],bytes32[],bytes32[])"(
      blockHeader: BytesLike,
      paraHead: BytesLike,
      paraHeadSiblingsProof: BytesLike[],
      messages: BytesLike[],
      mmrSiblingsProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateMMR(
      newMmrRoot: BytesLike,
      signatures: BytesLike[],
      bitmap: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateMMR(bytes32,bytes32[],uint8[])"(
      newMmrRoot: BytesLike,
      signatures: BytesLike[],
      bitmap: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateMMRWithValSet(
      newMmrRoot: BytesLike,
      signatures: BytesLike[],
      bitmap: BigNumberish[],
      valPubKeys: BytesLike[],
      pubKeyProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateMMRWithValSet(bytes32,bytes32[],uint8[],bytes32[],bytes32[])"(
      newMmrRoot: BytesLike,
      signatures: BytesLike[],
      bitmap: BigNumberish[],
      valPubKeys: BytesLike[],
      pubKeyProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
