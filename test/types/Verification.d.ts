/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VerificationInterface extends ethers.utils.Interface {
  functions: {
    "verifyMerkleAll(bytes32[],bytes32)": FunctionFragment;
    "verifyMerkleLeaf(bytes32,bytes32,bytes32[])": FunctionFragment;
    "verifyMessageArray(bytes32[],bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "verifyMerkleAll",
    values: [BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMerkleLeaf",
    values: [BytesLike, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMessageArray",
    values: [BytesLike[], BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "verifyMerkleAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMerkleLeaf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMessageArray",
    data: BytesLike
  ): Result;

  events: {};
}

export class Verification extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VerificationInterface;

  functions: {
    verifyMerkleAll(
      _data: BytesLike[],
      _commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "verifyMerkleAll(bytes32[],bytes32)"(
      _data: BytesLike[],
      _commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyMerkleLeaf(
      root: BytesLike,
      leaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "verifyMerkleLeaf(bytes32,bytes32,bytes32[])"(
      root: BytesLike,
      leaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyMessageArray(
      _data: BytesLike[],
      _commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "verifyMessageArray(bytes32[],bytes32)"(
      _data: BytesLike[],
      _commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  verifyMerkleAll(
    _data: BytesLike[],
    _commitment: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifyMerkleAll(bytes32[],bytes32)"(
    _data: BytesLike[],
    _commitment: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyMerkleLeaf(
    root: BytesLike,
    leaf: BytesLike,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifyMerkleLeaf(bytes32,bytes32,bytes32[])"(
    root: BytesLike,
    leaf: BytesLike,
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyMessageArray(
    _data: BytesLike[],
    _commitment: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifyMessageArray(bytes32[],bytes32)"(
    _data: BytesLike[],
    _commitment: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    verifyMerkleAll(
      _data: BytesLike[],
      _commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyMerkleAll(bytes32[],bytes32)"(
      _data: BytesLike[],
      _commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyMerkleLeaf(
      root: BytesLike,
      leaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyMerkleLeaf(bytes32,bytes32,bytes32[])"(
      root: BytesLike,
      leaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyMessageArray(
      _data: BytesLike[],
      _commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyMessageArray(bytes32[],bytes32)"(
      _data: BytesLike[],
      _commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    verifyMerkleAll(
      _data: BytesLike[],
      _commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyMerkleAll(bytes32[],bytes32)"(
      _data: BytesLike[],
      _commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyMerkleLeaf(
      root: BytesLike,
      leaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyMerkleLeaf(bytes32,bytes32,bytes32[])"(
      root: BytesLike,
      leaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyMessageArray(
      _data: BytesLike[],
      _commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyMessageArray(bytes32[],bytes32)"(
      _data: BytesLike[],
      _commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    verifyMerkleAll(
      _data: BytesLike[],
      _commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyMerkleAll(bytes32[],bytes32)"(
      _data: BytesLike[],
      _commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyMerkleLeaf(
      root: BytesLike,
      leaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyMerkleLeaf(bytes32,bytes32,bytes32[])"(
      root: BytesLike,
      leaf: BytesLike,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyMessageArray(
      _data: BytesLike[],
      _commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyMessageArray(bytes32[],bytes32)"(
      _data: BytesLike[],
      _commitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
